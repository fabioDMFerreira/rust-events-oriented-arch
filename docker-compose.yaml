version: '3'
services:
  postgres:
    image: postgres
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydb
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./db-init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 10

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - ./data/zookeeper:/var/lib/zookeeper

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    hostname: kafka
    container_name: kafka
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - ./data/kafka:/var/lib/kafka/data

  users:
    build:
      context: .
      dockerfile: ./users/Dockerfile.dev
    ports:
      - 8000:8000
    volumes:
      - ./users/src:/app/users/src
      - ./utils/src:/app/utils/src
      - ./logs/users:/var/log/app
    environment:
      CORS_ORIGIN: http://localhost:3000
      DATABASE_URL: "postgres://myuser:mypassword@postgres:5432/mydb?options=-c%20search_path%3Dusers"
      JWT_EXPIRED_IN: 60
      JWT_MAX_AGE: 3600
      JWT_SECRET: users-secret-1234
      KAFKA_URL: kafka:29092
      LOGS_PATH: /var/log/app/stdout.log
      PORT: 8000
      RUST_LOG: debug
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      users-migrations:
        condition: service_completed_successfully

  users-migrations:
    build:
      context: ./users
      dockerfile: Dockerfile.migrations
    environment:
      RUST_LOG: info
      DATABASE_URL: "postgres://myuser:mypassword@postgres:5432/mydb?options=-c%20search_path%3Dusers"
    depends_on:
      postgres:
        condition: service_healthy

  news:
    build:
      context: .
      dockerfile: ./news/Dockerfile.dev
    ports:
      - 8001:8001
    volumes:
      - ./news/src:/app/news/src
      - ./utils/src:/app/utils/src
      - ./logs/news:/var/log/app
    environment:
      DATABASE_URL: "postgres://myuser:mypassword@postgres:5432/mydb?options=-c%20search_path%3Dnews"
      LOGS_PATH: /var/log/app/stdout.log
      RUST_LOG: debug
      CORS_ORIGIN: http://localhost:3000
      PORT: 8001
      JWT_SECRET: users-secret-1234
      KAFKA_URL: kafka:29092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      news-migrations:
        condition: service_completed_successfully

  news-scrapper:
    build:
      context: .
      dockerfile: ./news-scrapper/Dockerfile.dev
    volumes:
      - ./news-scrapper/src:/app/news-scrapper/src
      - ./utils/src:/app/utils/src
      - ./logs/news-scrapper:/var/log/app
    environment:
      DATABASE_URL: "postgres://myuser:mypassword@postgres:5432/mydb?options=-c%20search_path%3Dnews"
      LOGS_PATH: /var/log/app/stdout.log
      RUST_LOG: debug
      KAFKA_URL: kafka:29092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      news-migrations:
        condition: service_completed_successfully

  news-migrations:
    build:
      context: ./news
      dockerfile: Dockerfile.migrations
    environment:
      RUST_LOG: info
      DATABASE_URL: "postgres://myuser:mypassword@postgres:5432/mydb?options=-c%20search_path%3Dnews"
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    volumes:
      - './frontend:/app'
      - '/app/node_modules'
    ports:
      - 3000:3000
    depends_on:
      - users
      - news
