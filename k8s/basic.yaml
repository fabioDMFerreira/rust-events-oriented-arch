apiVersion: v1
kind: Pod
metadata:
  name: api-pod
spec:
  containers:
    - name: api
      image: <your-api-image>
      ports:
        - containerPort: 8000
      volumeMounts:
        - name: api-src
          mountPath: /app/api/src
        - name: utils-src
          mountPath: /app/utils/src
        - name: api-logs
          mountPath: /var/log/app
      env:
        - name: RUST_LOG
          value: debug
        - name: DATABASE_URL
          value: 'postgres://myuser:mypassword@postgres:5432/mydb'
        - name: JWT_EXPIRED_IN
          value: '60'
        - name: JWT_MAX_AGE
          value: '3600'
        - name: JWT_SECRET
          value: 'api-secret-1234'
        - name: KAFKA_URL
          value: 'kafka:29092'
        - name: CORS_ORIGIN
          value: 'http://localhost:3000'
        - name: PORT
          value: '8000'
      livenessProbe:
        exec:
          command:
            - 'sh'
            - '-c'
            - 'pg_isready -U postgres || exit 1'
        initialDelaySeconds: 15
        periodSeconds: 5
        timeoutSeconds: 5
        failureThreshold: 3
  volumes:
    - name: api-src
      hostPath:
        path: /path/to/api/src
    - name: utils-src
      hostPath:
        path: /path/to/utils/src
    - name: api-logs
      hostPath:
        path: /path/to/logs/api

---
apiVersion: v1
kind: Pod
metadata:
  name: api-migrations-pod
spec:
  containers:
    - name: api-migrations
      image: <your-api-migrations-image>
      env:
        - name: RUST_LOG
          value: info
        - name: DATABASE_URL
          value: 'postgres://myuser:mypassword@postgres:5432/mydb'
      livenessProbe:
        exec:
          command:
            - 'sh'
            - '-c'
            - 'pg_isready -U postgres || exit 1'
        initialDelaySeconds: 15
        periodSeconds: 5
        timeoutSeconds: 5
        failureThreshold: 3
  volumes:
    - name: api-src
      hostPath:
        path: /path/to/api/src

---
apiVersion: v1
kind: Pod
metadata:
  name: postgres-pod
spec:
  containers:
    - name: postgres
      image: postgres
      ports:
        - containerPort: 5432
      env:
        - name: POSTGRES_USER
          value: myuser
        - name: POSTGRES_PASSWORD
          value: mypassword
        - name: POSTGRES_DB
          value: mydb
      volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
      livenessProbe:
        exec:
          command:
            - 'sh'
            - '-c'
            - 'pg_isready -U postgres || exit 1'
        initialDelaySeconds: 15
        periodSeconds: 5
        timeoutSeconds: 5
        failureThreshold: 3
  volumes:
    - name: postgres-data
      hostPath:
        path: /path/to/data/postgres

---
apiVersion: v1
kind: Pod
metadata:
  name: consumer-pod
spec:
  containers:
    - name: consumer
      image: <your-consumer-image>
      volumeMounts:
        - name: consumer-src
          mountPath: /app/consumer/src
        - name: utils-src
          mountPath: /app/utils/src
        - name: consumer-logs
          mountPath: /var/log/app
      env:
        - name: RUST_LOG
          value: debug
        - name: KAFKA_URL
          value: 'kafka:29092'
      livenessProbe:
        exec:
          command:
            - 'sh'
            - '-c'
            - 'nc -z localhost 9092 || exit 1'
        initialDelaySeconds: 15
        periodSeconds: 5
        timeoutSeconds: 5
        failureThreshold: 3
  volumes:
    - name: consumer-src
      hostPath:
        path: /path/to/consumer/src
    - name: utils-src
      hostPath:
        path: /path/to/utils/src
    - name: consumer-logs
      hostPath:
        path: /path/to/logs/consumer

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: <your-frontend-image>
          ports:
            - containerPort: 3000
          volumeMounts:
            - name: frontend-src
              mountPath: /app
            - name: frontend-node-modules
              mountPath: /app/node_modules
      volumes:
        - name: frontend-src
          hostPath:
            path: /path/to/frontend
        - name: frontend-node-modules
          emptyDir: {}
